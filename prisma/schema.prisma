generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String
  password      String
  pixKey        String?       
  phoneNumber   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  expenses      Expense[]      @relation("UserExpenses")
  ownedGroups   Group[]        @relation("GroupOwner")
  memberships   GroupMember[]  
  debtorIn      ExpenseShare[] 
  resetPasswordToken String?

  @@index([email])
}

model Group {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ownerId     Int

  
  owner       User          @relation("GroupOwner", fields: [ownerId], references: [id])
  expenses    Expense[]
  members     GroupMember[] 
  status      GroupStatus @default(ACTIVE)

  @@index([ownerId])
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  groupId   Int
  userId    Int
  joinedAt  DateTime @default(now())


  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([userId])
  @@index([groupId])
}

model Expense {
  id          Int            @id @default(autoincrement())
  description String
  amount      Float         
  paidAmount  Float          @default(0)
  category    String
  status      ExpenseStatus  @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  splitType   String
  
  
  payerId     Int
  groupId     Int

  
  payer       User          @relation("UserExpenses", fields: [payerId], references: [id])
  group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  shares      ExpenseShare[] 

  @@index([payerId])
  @@index([groupId])
  @@index([status])
}

model ExpenseShare {
  id        Int      @id @default(autoincrement())
  amount    Float    
  paid      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  expenseId Int
  debtorId  Int     

  
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  debtor    User    @relation(fields: [debtorId], references: [id])

  @@unique([expenseId, debtorId])
  @@index([debtorId])
  @@index([expenseId])
  @@index([paid])
}

enum ExpenseStatus {
  PENDING
  PARTIALLY_PAID
  PAID
  CANCELLED
}

enum GroupStatus {
  ACTIVE
  INACTIVE
}